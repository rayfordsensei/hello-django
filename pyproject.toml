[project]
name = "wiki"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "django>=5.1.6",
]

[dependency-groups]
dev = [
    "django>=5.1.6",
    "django-request-logging>=0.7.5",
    "djlint>=1.36.4",
    "python-decouple>=3.8",
    "ruff>=0.9.7",
]

[tool.setuptools]
py-modules = []  # fixes `Multiple top-level packages discovered in a flat-layout`

[tool.black]
line-length    = 120
target-version = ["py312"]
preview        = true

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "types",
    "__pycache__",
]
line-length = 120
preview     = true
target-version = "py312"

[tool.ruff.lint]
select = [
	"ALL",   # include all the rules, because I'm insane \_*-*_/
]

ignore = [
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D106",     # Missing docstring in public nested class
    "D107",     # Missing docstring in __init__
    "CPY001",   # Missing copyright notice at top of file
    "T201",     # print found
    "ERA001",   # Found commented-out code
    "S311",     # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S101",     # Use of assert detected
    "FIX002",   # Line contains TODO, consider resolving the issue
    "TD002",    # Missing author in TODO
    "TD003",    # Missing issue link for this TODO
    "TRY003",   # Avoid specifying long messages outside the exception class
    "EM101",    # Exception must not use a string literal, assign to variable first
    "ANN201",   # Missing return type annotation for public function
    "ANN001",   # Missing type annotation for function argument
    "COM819",   # Trailing comma prohibited
]

fixable = [
	"A",
	"B",
	"C",
	"D",
	"E",
	"F"
]

unfixable = [
	"F401", # unused import
	"F841", # unused variable
]

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.isort]
profile        = "black"
py_version     = 312
atomic         = true
line-length    = 120
skip_gitignore = true

[tool.basedpyright]
venvPath = "."
venv     = ".venv"
pythonVersion = "3.12"

typeCheckingMode       = "recommended"

reportMissingTypeStubs = false
reportMissingParameterType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnannotatedClassAttribute = false
reportImplicitOverride = false
reportArgumentType = false
reportAny = false

exclude = [
    "**/node_modules",
    "**/__pycache__",
    "src/experimental",
    "src/typestubs",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "types",
]

[tool.djlint]
ignore="H030,H031"
